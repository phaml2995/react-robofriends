{"version":3,"sources":["component/card.component.jsx","component/cardList.component.jsx","component/searchBox.component.jsx","component/Scroll.component.jsx","component/header.component.jsx","App.js","redux/actions.js","redux/constants.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","console","log","cardComp","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","Header","nextProps","nextState","Component","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobot","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e77a053.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${props.id}?size=300x300`} alt=\"robots\"/>\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './card.component';\n\n\nconst CardList = ({robots}) => {\n    console.log(\"Cardlist is being rendered\")\n    const cardComp = robots.map((user,i) => {\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n    })\n    return (\n        <div>\n            {cardComp}\n        </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\nimport '../style/searchBox.styles.scss';\n\nconst SearchBox = ({ searchChange }) => {\n    console.log(\"SearchBox\");\n    return (\n        <div className=\"container\">\n            <input\n                type=\"search\"\n                placeholder=\"Search Robots\"\n                className=\"search-box\"\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\nimport '../style/Scroll.styles.scss';\n\nconst Scroll = (props) => {\n    return (\n        <div className='scroll'>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n        console.log(\"Header\");\n        return <h1 className=\"f1\">RoboFriends</h1>\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport CardList from './component/cardList.component';\nimport SearchBox from './component/searchBox.component';\nimport Scroll from './component/Scroll.component';\nimport { connect } from 'react-redux';\nimport * as Actions from './redux/actions';\nimport Header from './component/header.component';\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(Actions.setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(Actions.requestRobots())\n  }\n}\n\nclass App extends React.Component {\n  \n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render(){\n    const  {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return  isPending ? <h1>Loading</h1> : (\n      <div className=\"App\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    )\n  }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAIL,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({\n        type: REQUEST_ROBOTS_PENDING\n    })\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAIL, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAIL = \"REQUEST_ROBOTS_FAIL\";\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAIL,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\n\nconst initialStateSearch = {\n    searchField: '',\n    \n}\nconst initialStateRobot = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const searchRobots = (state=initialStateSearch, action) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return {\n                ...state,\n                searchField: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const requestRobots = (state=initialStateRobot, action) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return{\n                ...state,\n                isPending: true\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return{\n                ...state,\n                isPending: false,\n                robots: action.payload\n            }\n        case REQUEST_ROBOTS_FAIL:\n            return{\n                ...state,\n                isPending: false,\n                error: action.payload\n            }\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport App from './App';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './redux/reducers';\n\n\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}